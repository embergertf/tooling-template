# This is a basic workflow to help you get started with Actions

name: Create a module repo

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      module-display-name:
        description: 'Enter the module Display name, like "Key vault".'
        required: true
        default: ''
      module-name:
        description: 'Enter a module name, like "keyvault" to create "terraform-azurerm-keyvault" repository.'
        required: true
        default: ''
      module-code:
        description: 'Enter the module code/prefix, like "kv".'
        required: true
        default: ''

env:
  ORG_NAME: embergertf
  REPO_PREFIX: terraform-azurerm
  GH_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  CreateModuleRepo:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

      # Where are we?
      - name: Run pwd & ls
        run: |
          pwd
          ls -al

      # Replace tokens in Terraform files
      - uses: cschleiden/replace-tokens@v1
        name: Replace tokens in Terraform files
        with:
          files: '["**/*.tf", "**/*.tfvars", "**/*.md"]'
        env:
          MODULENAME: '${{ github.event.inputs.module-name }}' #"application-insights"
          MODULEDISPLAYNAME: '${{ github.event.inputs.module-display-name }}' #"Application Insights"
          CREATIONDATE: "2023-06-20"
          MODULECODE: '${{ github.event.inputs.module-code }}' # "api"

      # Check result on 1 file
      - name: Check token replacement in 1 file
        run: cat ./module-repo-template/main.tf

      # Initialize the folder as a git repo
      - name: Init new git repo
        run: |
          cd "./module-repo-template"
          git config --global init.defaultBranch main
          git config --global user.email "gh@emwito.com"
          git config --global user.name "GH Actions"
          git init
          git branch -m main
          git add .
          git commit -m "${{ github.event.inputs.module-display-name }} repo creation"

      # # Clone the new GitHub repository
      # - name: Cloning module repository
      #   run: git clone https://gopher194:${{ secrets.ORG_ADMIN_TOKEN }}@github.com/$ORG_NAME/$REPO_PREFIX-${{ github.event.inputs.module-name }}.git

      # Testing gh CLI
      - name: Creating the repo with GH CLI
        run: |
          gh repo create $ORG_NAME/$REPO_PREFIX-${{ github.event.inputs.module-name }} --public --source="../tooling-template/module-repo-template" --push --disable-wiki